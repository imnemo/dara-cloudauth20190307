import Util;
import RPCUtil;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-beijing = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'ecs-cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    us-west-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    us-east-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'ecs.aliyuncs.com',
    ap-northeast-2-pop = 'ecs.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'ecs.aliyuncs.com',
    cn-beijing-finance-pop = 'ecs.aliyuncs.com',
    cn-beijing-gov-1 = 'ecs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-edge-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-finance = 'ecs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-test-306 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong-finance-pop = 'ecs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-inner = 'ecs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-inner = 'ecs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-wuhan = 'ecs.aliyuncs.com',
    cn-yushanfang = 'ecs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ecs.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'ecs.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'ecs.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model CompareFaceVerifyRequest = {
  regionId: string(name='RegionId'),
  sceneId: string(name='SceneId'),
  outerOrderNo: string(name='OuterOrderNo'),
  productCode: string(name='ProductCode'),
  sourceFaceContrastPicture?: string(name='SourceFaceContrastPicture'),
  sourceFaceContrastPictureUrl?: string(name='SourceFaceContrastPictureUrl'),
  sourceCertifyId?: string(name='SourceCertifyId'),
  sourceOssBucketName?: string(name='SourceOssBucketName'),
  sourceOssObjectName?: string(name='SourceOssObjectName'),
  targetFaceContrastPictureUrl?: boolean(name='TargetFaceContrastPictureUrl'),
  targetCertifyId?: boolean(name='TargetCertifyId'),
  targetOssBucketName?: boolean(name='TargetOssBucketName'),
  targetOssObjectName?: boolean(name='TargetOssObjectName'),
}

model CompareFaceVerifyResponse = {
  requestId: string(name = 'RequestId'),
  message: string(name = 'Message'),
  code: string(name = 'Code'),
  resultObject: {
    passed: string(name = 'Passed'),
    verfifyScore: float(name = 'VerifyScore'),
  }(name = 'ResultObject')
}

async function compareFaceVerifyWithOption(request: CompareFaceVerifyRequest, runtime: Util.RuntimeOptions): CompareFaceVerifyResponse {
  Util.validateModel(request);
  return doRequest('CompareFaceVerify', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function compareFaceVerify(request: CompareFaceVerifyRequest): CompareFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFaceVerifyWithOption(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}